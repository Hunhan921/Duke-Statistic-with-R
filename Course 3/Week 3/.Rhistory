library(statsr)
library(dplyr)
library(ggplot2)
library(GGally)
data(evals)
summary (evals$score)
q3 <- evals %>% filter(score<3)
hist(evals$score)
ggplot(data = evals, aes(x=ethnicity,
fill=rank))+
geom_bar(position = "fill")
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_point()
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter()
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm")
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE)
m_bty = lm(score~bty_avg, data = evals)
summary(m_bty)
# type your code for the Question 5 here, and Knit
hist(m_bty$residuals)
plot(abs(m_bty$residuals) ~ m_bty$fitted.values)
# type your code for the Question 5 here, and Knit
hist(m_bty$residuals)
plot(m_bty$residuals ~ m_bty$fitted.values)
ggplot(data = evals, aes(x = bty_f1lower, y = bty_avg)) +
geom_jitter()
evals %>%
summarise(cor(bty_avg, bty_f1lower))
ggpairs(evals, columns = 13:19)
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
View(m_bty_gen)
View(m_bty_gen)
plot(m_bty_gen$residuals ~ m_bty_gen$fitted.values)
qqnorm(m_bty_gen$residuals)
print(summary(m_bty_gen))
summary(m_bty_gen)
summary(m_btyy)
summary(m_bty)
?rlevel
?relevel
m_bty_rank = lm(score ~ bty_avg + rank. data = evals)
m_bty_rank = lm(score ~ bty_avg + rank, data = evals)
summary(m_bty_rank)
m_bty_rank = lm(score ~ bty_avg + rank, data = evals, relevel(rank, tenured))
m_bty_rank = lm(score ~ bty_avg + rank, data = evals, relevel(rank, "tenured"))
evals$gender <- relevel(evals$gender, ref="male")
m_bty_gen <- lm(score~bty_avg+gender, data = evals)
summary(m_bty_gen)
m_bty_rank = lm(score ~ bty_avg + rank, data = evals)
summary(m_bty_rank)
newprof <- data.frame(gender = "male", bty_avg = 3)
predict(m_bty_gen, newprof)
predict(m_bty_gen, newprof, interval = "prediction", level = 0.95)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
View(m_full)
#cls_prof had the highest p value in m_full model
m_full2 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)$coefficients
#cls_prof had the highest p value in m_full model
m_full2 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)$coefficients
summary(m_full2)$coefficients
m1 <- lm(score ~ ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m1)$adj.r.squared
m2 = lm(score ~ rank + gender + language + age + cls_perc_eval +
cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m2)$adj.r.squared
#Model dropping bty_avg
m3 = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval +
cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m3)$adj.r.squared
#Model dropping cls_profs
m4 = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval +
cls_students + cls_level + cls_credits + bty_avg, data = evals)
summary(m4)$adj.r.squared
#Model dropping cls_students
m5 = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval +
cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m5)$adj.r.squared
#Model m1 removed 'rank' from the list of explantory variables
summary(m1)$adj.r.squared
#Model dropping bty_avg
m3 = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval +
cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m3)$adj.r.squared
#Model dropping cls_profs
m4 = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval +
cls_students + cls_level + cls_credits + bty_avg, data = evals)
summary(m4)$adj.r.squared
#Model dropping cls_students
m5 = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval +
cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m5)$adj.r.squared
#Model m1 removed 'rank' from the list of explantory variables
summary(m1)$adj.r.squared
# Model dropping bty_avg
m3 = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval +
cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m3)$adj.r.squared
# Model dropping cls_profs
m4 = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval +
cls_students + cls_level + cls_credits + bty_avg, data = evals)
summary(m4)$adj.r.squared
# Model dropping cls_students
m5 = lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval +
cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m5)$adj.r.squared
# Model m1 removed rank from the list of explantory variables
summary(m1)$adj.r.squared
m1 <- lm(score ~ ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m1)$adj.r.squared
View(evals)
View(evals)
?ols_step_backward
??ols_step_backward
??ols_step_backward_p
?ols_step_backward_p
??ols_step_backward_p
m <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
ols_step_backward_p(m)
m <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
step(m, direction = "backward", trace=FALSE )
?step
m <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
#final model using backward selection
step(m, direction = "backward", method="adjr2", trace=FALSE )
m <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
#final model using backward selection
step(m, direction = "backward", method="adjr2", trace=TRUE )
gc()
